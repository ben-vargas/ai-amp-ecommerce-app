#!/usr/bin/env bun
import fs from "node:fs"
import { execSync } from "node:child_process"

/**
 * This program implements the Amp Toolbox protocol to provide
 * custom tools to an LLM without writing an MCP server.
 *
 * Amp invokes this program once at startup with TOOLBOX_ACTION set
 * to "describe".  The program then needs to write its tool schema
 * to stdout.
 *
 * When the model wants to use the tool, TOOLBOX_ACTION is set to
 * "execute" and tool parameters are passed to stdin as a JSON object.
 *
 * Any output on stdout/stderr goes directly to the model and need not
 * be structured.
 */
const action = process.env.TOOLBOX_ACTION

if (action === 'describe') showDescription()
else if (action === 'execute') execute()

/**
 * Use args for a simplified tool description:
 *  - [type, description]
 *  - where type is "string", "number", "object", "array", "boolean"
 *
 * Use inputSchema instead for full JSON schema support.
 */
function showDescription() {
 // The description MUST mention when to use this tool instead of Bash,
 // otherwise the model will prefer unstructured command line tools.
 //
 // Tools like this one should always have highest priority, because
 // they are carefully crafted for a specific purpose.
 process.stdout.write(
  JSON.stringify({
   name: "lint_and_check",
   description: 'Run static analysis and linting checks on backend and/or frontend. Use this tool to verify code quality, check for linting errors, run type checks, or validate code style. Always prefer this tool over running lint/check commands directly via Bash.',
   args: { 
     target: ['string', 'The target to check. Options: "backend" (runs just check: ruff + mypy), "frontend" (runs just lint: npm run lint), "both" (runs both backend then frontend), "help" (shows available options). Default: "both"']
   },
  }),
 )
}

function execute() {
 // parse parameters as JSON from stdin (matches inputSchema/args from showDescription)
 const params = JSON.parse(fs.readFileSync(0, 'utf-8'))
 let target = params['target']
 target = target && target.length > 0 ? target : 'both'

 // output goes directly to the model
 switch (target) {
   case "backend":
     console.log("Running backend checks (ruff + mypy)...\n")
     try {
       const output = execSync('just check', { encoding: 'utf-8', stdio: 'pipe' })
       console.log(output)
       console.log("\n✅ Backend checks passed!")
     } catch (error) {
       console.error("\n❌ Backend checks failed:\n")
       console.error(error.stdout || error.stderr || error.message)
       process.exit(1)
     }
     break;
   
   case "frontend":
     console.log("Running frontend lint checks...\n")
     try {
       const output = execSync('just lint', { encoding: 'utf-8', stdio: 'pipe' })
       console.log(output)
       console.log("\n✅ Frontend lint passed!")
     } catch (error) {
       console.error("\n❌ Frontend lint failed:\n")
       console.error(error.stdout || error.stderr || error.message)
       process.exit(1)
     }
     break;
   
   case "both":
     console.log("Running all checks (backend + frontend)...\n")
     let backendFailed = false
     let frontendFailed = false
     let backendOutput = ""
     let frontendOutput = ""

     console.log("=".repeat(60))
     console.log("BACKEND CHECKS (ruff + mypy)")
     console.log("=".repeat(60) + "\n")
     
     try {
       backendOutput = execSync('just check', { encoding: 'utf-8', stdio: 'pipe' })
       console.log(backendOutput)
       console.log("\n✅ Backend checks passed!")
     } catch (error) {
       backendFailed = true
       backendOutput = error.stdout || error.stderr || error.message
       console.error(backendOutput)
       console.error("\n❌ Backend checks failed!")
     }

     console.log("\n" + "=".repeat(60))
     console.log("FRONTEND CHECKS (ESLint)")
     console.log("=".repeat(60) + "\n")
     
     try {
       frontendOutput = execSync('just lint', { encoding: 'utf-8', stdio: 'pipe' })
       console.log(frontendOutput)
       console.log("\n✅ Frontend lint passed!")
     } catch (error) {
       frontendFailed = true
       frontendOutput = error.stdout || error.stderr || error.message
       console.error(frontendOutput)
       console.error("\n❌ Frontend lint failed!")
     }

     console.log("\n" + "=".repeat(60))
     console.log("SUMMARY")
     console.log("=".repeat(60))
     console.log(`Backend:  ${backendFailed ? "❌ FAILED" : "✅ PASSED"}`)
     console.log(`Frontend: ${frontendFailed ? "❌ FAILED" : "✅ PASSED"}`)

     if (backendFailed || frontendFailed) {
       console.error("\n❌ Some checks failed!")
       process.exit(1)
     } else {
       console.log("\n✅ All checks passed!")
     }
     break;
   
   case "help":
     console.log(`
Available targets:
  backend     - Run backend checks (ruff + mypy) via 'just check'
  frontend    - Run frontend lint (ESLint) via 'just lint'
  both        - Run both backend and frontend checks (default)
  help        - Show this help message

Examples:
  {"target": "backend"}
  {"target": "frontend"}
  {"target": "both"}
     `.trim())
     break;
   
   default: 
     process.stderr.write(`Unknown target: ${target}\n\nUse target "help" to see available options.`)
     process.exit(1)
 }
}
