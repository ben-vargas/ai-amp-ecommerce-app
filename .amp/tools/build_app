#!/usr/bin/env bun
import fs from "node:fs"
import { spawnSync } from "node:child_process"

/**
 * This program implements the Amp Toolbox protocol to provide
 * custom tools to an LLM without writing an MCP server.
 *
 * Amp invokes this program once at startup with TOOLBOX_ACTION set
 * to "describe".  The program then needs to write its tool schema
 * to stdout.
 *
 * When the model wants to use the tool, TOOLBOX_ACTION is set to
 * "execute" and tool parameters are passed to stdin as a JSON object.
 *
 * Any output on stdout/stderr goes directly to the model and need not
 * be structured.
 */
const action = process.env.TOOLBOX_ACTION

if (action === 'describe') showDescription()
else if (action === 'execute') execute()

/**
 * Use args for a simplified tool description:
 *  - [type, description]
 *  - where type is "string", "number", "object", "array", "boolean"
 *
 * Use inputSchema instead for full JSON schema support.
 */
function showDescription() {
 // The description MUST mention when to use this tool instead of Bash,
 // otherwise the model will prefer unstructured command line tools.
 //
 // Tools like this one should always have highest priority, because
 // they are carefully crafted for a specific purpose.
 process.stdout.write(
  JSON.stringify({
   name: "build_app",
   description: 'Use this tool (NEVER use Bash or just commands directly) to build the frontend application for production instead of using Bash or npm commands directly. This verifies TypeScript compilation and creates the production build.',
   args: { action: ['string', 'the action to take, one of: "frontend", "help"'] },
  }),
 )
}

function execute() {
 // parse parameters as JSON from stdin (matches inputSchema/args from showDescription)
 let params = {}
 try {
  const input = fs.readFileSync(0, 'utf-8').trim()
  params = input ? JSON.parse(input) : {}
 } catch (e) {
  console.error('Failed to parse parameters:', e.message)
  process.exit(1)
 }
 
 const action = params['action'] || 'frontend'

 // output goes directly to the model
 switch (action) {
	case "frontend":
	 console.log('→ Building frontend application...')
	 const result = spawnSync('npm', ['run', 'build'], { cwd: 'frontend', stdio: 'inherit' })
	 if (result.status !== 0) {
	  process.exit(result.status || 1)
	 }
	 console.log('✓ Frontend build completed successfully')
	 break
	case "help":
	 process.stdout.write('Usage: action="frontend" to build the frontend application\n')
	 break
    default: process.stderr.write(`Unknown action: ${action}`); process.exit(1);
 }
}
